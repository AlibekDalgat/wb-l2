package main

import (
	"fmt"
	"sort"
	"strings"
)

/*
=== Поиск анаграмм по словарю ===

Напишите функцию поиска всех множеств анаграмм по словарю.
Например:
'пятак', 'пятка' и 'тяпка' - принадлежат одному множеству,
'листок', 'слиток' и 'столик' - другому.

Входные данные для функции: ссылка на массив - каждый элемент которого - слово на русском языке в кодировке utf8.
Выходные данные: Ссылка на мапу множеств анаграмм.
Ключ - первое встретившееся в словаре слово из множества
Значение - ссылка на массив, каждый элемент которого, слово из множества. Массив должен быть отсортирован по возрастанию.
Множества из одного элемента не должны попасть в результат.
Все слова должны быть приведены к нижнему регистру.
В результате каждое слово должно встречаться только один раз.

Программа должна проходить все тесты. Код должен проходить проверки go vet и golint.
*/

// структура хранящая отсортированную по буквам слово и оригинальное слово
type orderlyWord struct {
	ordered string
	origin  string
}

// требуемая функция
func searchAnagramSets(words *[]string) *map[string][]string {
	// результирующая мапа
	res := make(map[string][]string)
	// слайс содержащий информаицю об отсортированных словах. слова, принадлежащие к к одной анаграме, будут иметь одинаковую отсортировку букв
	orderedWords := make([]orderlyWord, len(*words))
	// проход по слайсу слов
	for i, word := range *words {
		// приведение слова к нижнему регистру и преобразлвание к слайсу рун
		runes := []rune(strings.ToLower(word))
		// сортировка слова по его буквам
		sort.SliceStable(runes, func(i, j int) bool {
			return runes[i] < runes[j]
		})
		orderedWords[i] = orderlyWord{ordered: string(runes), origin: strings.ToLower(word)}
	}
	// проход по слайсу отсортированных слов по его буквам
	for _, word := range orderedWords {
		// добавление к ключу отсортированного слова оригинальное слово
		res[word.ordered] = append(res[word.ordered], word.origin)
	}

	// проход по результирующей мапе для сортировки слайс в значениях
	for key := range res {
		sort.SliceStable(res[key], func(i, j int) bool {
			return res[key][i] < res[key][j]
		})
	}

	// проход по результирующей мапе для корректного вывода
	for key := range res {
		// если множество состоит из одоного слова удалить
		if len(res[key]) == 1 {
			delete(res, key)
			// если ключ не явлвяется первым словом из отсортированного массива слов - исправить
		} else if res[key][0] != key {
			res[res[key][0]] = res[key]
			delete(res, key)
		}
	}
	// возвращение адреса результирующей мапы
	return &res
}

func main() {
	s := &[]string{"пятак", "слиток", "тяпка", "столик", "пятка", "листок"}
	fmt.Println(searchAnagramSets(s))
}
